{"title":"Массивы","template":"//\n","markdown":"# Массивы\n\nСоздание массивов, добавление элементов в массив, изменение элементов в массиве и получение элементов из массива.\n\n## Объявим массив\n\n * Объявите массив `numbers` в котором должно быть пять чисел, первое должно быть равно `1`, а каждое следующее — в три раза больше предыдущего.\n\n## Посоздаем копии и поизменяем их\n\n * Создайте копию массива `numbers` и занесите в константу `numbersCopy`\n * Получите три последних элемента `numbers`, разверните в обратном порядке и занесите в константу `last3`\n * Просуммируйте элементы `last3` и запишите результат в `sumLast3`.\n * Скопируйте `last3`, добавьте в него два числа `100` и `200` и сохраните в константу `five`.\n","cases":[{"title":"Массив `numbers` должен иметь пять элементов","depends":[],"code":"\nconst { numbers } = result;\n\nassertIsArray(numbers);\nassertEqual(5, numbers.length);\n","resultVars":["numbers"],"id":"01.js"},{"title":"Первый элемент массива `numbers` должен быть равен `1`","depends":[],"code":"\nconst { numbers } = result;\n\nconst [ first ] = numbers;\n\nassertEqual(1, first);\n","resultVars":["numbers"],"id":"02.js"},{"title":"Каждый следующий элемент `numbers` должен быть в три раза больше предыдущего","depends":[],"code":"\nconst { numbers } = result;\n\nassertIsArray(numbers);\nfor (let i = 1; i < numbers.length; i++) {\nassertEqual(numbers[i - 1] * 3, numbers[i]);\n}\n","resultVars":["numbers"],"id":"03.js"},{"title":"Массив `numbersCopy` должен быть копией массива `numbers` (не ссылкой)","depends":[],"code":"\nconst { numbers, numbersCopy } = result;\n\nassertDeepEqual(numbers, numbersCopy);\n\nnumbersCopy[0] = 10;\n\nassertEqual(10, numbersCopy[0]);\nassertEqual(1, numbers[0]);\n","resultVars":["numbers","numbersCopy"],"id":"04.js"},{"title":"В `last3` должны находиться три последних числа от большего к меньшему","depends":[],"code":"\nconst { last3, numbers } = result;\n\nassertIsArray(last3);\nassertIsArray(numbers);\n\nassertEqual(3, last3.length);\n\nconst rev = numbers.slice(-3).reverse();\nassertDeepEqual(last3, rev);\n","resultVars":["last3","numbers"],"id":"05.js"},{"title":"Константа `sumLast3` должна содержать сумму последних трех элементов","depends":[],"code":"\nconst { last3, sumLast3 } = result;\n\nassertIsNumber(sumLast3);\nassertEqual(sumLast3, last3.reduce((a, b) => a + b, 0));\n","resultVars":["last3","sumLast3"],"id":"06.js"},{"title":"Подготовьте константу `five`: первые три элемента из `last3` и два числа `100` и `200`","depends":[],"code":"\nconst { five, last3 } = result;\n\nassertIsArray(five);\nassertIsArray(last3);\n\nassertDeepEqual(five, [...last3, 100, 200]);\n","resultVars":["five","last3"],"id":"07.js"}],"resultVars":["numbers","numbersCopy","last3","sumLast3","five"],"nextRoute":"/tasks/2a0326ab-c18a-4995-8803-fdd96d8803b8","courseRoute":"/course/6d88374c-b517-45eb-80a6-6f3b5df106f4"}