{"title":"Используем Point внутри Rectangle","template":"class Point {\n  constructor(x, y) { this.move(x, y); }\n  move(x, y) { this.x = x; this.y = y; }\n  moveBy(x, y) { this.x += x; this.y += y; }\n  mirror(x, y) { this.x += 2 * (x - this.x); this.y += 2 * (y - this.y); }\n}\n\nclass Rectangle {\n  constructor(x, y, w, h) {\n    this.position = new Point(x, y);\n    this.size = new Point(w, h);\n  }\n  move(x, y) {\n    this.position.move(x, y);\n  }\n  points() {\n    const { x: x1, y: y1 } = this.position;\n    const x2 = x1 + this.size.x;\n    const y2 = y1 + this.size.y;\n    const l = Math.min(x1, x2), r = Math.max(x1, x2);\n    const t = Math.min(y1, y2), b = Math.max(y1, y2);\n\n    return [\n      [ l, t ], [ r, t ], [ r, b ], [ l, b ]\n    ];\n  }\n  // moveBy(x, y) {}\n  // mirror(x, y) {}\n}\n","markdown":"# Используем Point внутри Rectangle\n\nВозьмем готовый класс `Rectangle` и посмотрим, как мы сможем его модифицировать.\n\n### Добавим метод Rectangle.moveBy\n\nСовсем ничего сложного, просто переместим `this.position`, т.к. это точка.\n\n### Добавим метод Rectangle.mirror\n\nТоже ничего сложного, но нужно придумать, как.\n\n### Примечания\n\nОбъект в тестах будет создан примерно так:\n\n```js\nconst r = new Rectangle(10, 10, 4, 6);\n```\n\nСравнение c образцом будет производиться с результатом функции `Rectangle.points()`.\n","cases":[{"title":"`Rectangle.moveBy(x, y)` должна быть функцией","depends":[],"code":"\nconst { Rectangle } = result;\n\nconst r = new Rectangle(10, 10, 4, 6);\nassertIsFunction(r.moveBy);\n","resultVars":["Rectangle"],"id":"01.js"},{"title":"`Rectangle.moveBy(10, 10)` должна переместить прямоугольник в точку `(20, 20)`","depends":[],"code":"\nconst { Rectangle } = result;\n\nconst r = new Rectangle(10, 10, 4, 6);\nr.moveBy(10, 10);\n\nassertDeepEqual([\n[20, 20], [24, 20], [24, 26], [20, 26]\n], r.points());\n","resultVars":["Rectangle"],"id":"02.js"},{"title":"`Rectangle.mirror(x, y)` должна быть функцией","depends":[],"code":"\nconst { Rectangle } = result;\n\nconst r = new Rectangle(10, 10, 4, 6);\nassertIsFunction(r.mirror);\n","resultVars":["Rectangle"],"id":"03.js"},{"title":"вызов `Rectangle.mirror(0, 0)` отразит прямоугольник относительно начала координат","depends":[],"code":"\nconst { Rectangle } = result;\n\nconst r = new Rectangle(10, 10, 4, 6);\nr.mirror(0, 0);\n\nassertDeepEqual([\n[-14, -16], [-10, -16], [-10, -10], [-14, -10]\n], r.points());\n","resultVars":["Rectangle"],"id":"04.js"},{"title":"вызов `Rectangle.mirror(10, 10)` отразит прямоугольник относительно его позиции","depends":[],"code":"\nconst { Rectangle } = result;\n\nconst r = new Rectangle(10, 10, 4, 6);\nr.mirror(10, 10);\n\nassertDeepEqual([\n[6, 4], [10, 4], [10, 10], [6, 10]\n], r.points());\n","resultVars":["Rectangle"],"id":"05.js"}],"resultVars":["Rectangle"],"nextRoute":"/tasks/8e722e0d-b2d6-4e20-a42f-38eeae6da9cb","courseRoute":"/course/6bff496c-8fe9-4cca-9bfb-ee5801314fbf"}