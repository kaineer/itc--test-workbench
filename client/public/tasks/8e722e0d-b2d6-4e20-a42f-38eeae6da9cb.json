{"title":"Класс Container, список фигур","template":"class Point {\n  constructor(x, y) { this.move(x, y); }\n  move(x, y) { this.x = x; this.y = y; }\n  moveBy(x, y) { this.x += x; this.y += y; }\n  mirror(x, y) { this.x += 2 * (x - this.x); this.y += 2 * (y - this.y); }\n}\n\nclass Rectangle {\n  constructor(x, y, w, h) {\n    this.position = new Point(x, y);\n    this.size = new Point(w, h);\n  }\n  move(x, y) { this.position.move(x, y); }\n  moveBy(x, y) { this.position.moveBy(x, y); }\n}\n\nclass Container {\n  constructor(x = 0, y = 0) {\n    this.position = new Point(x, y);\n  }\n\n  // add(figure) {}\n  // move(x, y) {}\n  // moveBy(x, y) {}\n}\n","markdown":"# Класс Container, список фигур\n\nРассмотрим класс, содержащий в себе несколько разных фигур.\nУ нас уже реализован прямоугольник, предположим, что кто-то уже реализовал треугольник,\nи у каждой из фигур есть методы `move` и `moveBy`. Предположим, нам нужно реализовать методы `move` и `moveBy` для нашего контейнера.\n\n### Метод add(figure)\n\nДолжен добавлять новую фигуру в список внутри контейнера и сдвигать ее, если позиция контейнера не (0, 0).\n\n### Метод move(x, y)\n\nДолжен сдвигать все фигуры внутри контейнера и менять позицию контейнера\n\n### Метод moveBy(x, y)\n\nДолжен сдвигать контейнер и фигуры в нем на x и y\n","cases":[{"title":"`Container.add(figure)` должен быть функцией","depends":[],"code":"\nconst { Container } = result;\nconst c = new Container();\n\nassertIsFunction(c.add);\n","resultVars":["Container"],"id":"01.js"},{"title":"`Container.add(rectangle)` отрабатывает и не генерирует исключения","depends":[],"code":"\nconst { Container, Rectangle } = result;\nconst c = new Container();\nconst r = new Rectangle(0, 0, 1, 1);\n\nassertDoesNotThrow(() => c.add(r));\n","resultVars":["Container","Rectangle"],"id":"02.js"},{"title":"Если контейнер расположен в точке (2, 3), добавление прямоугольника из точки (0, 0), должно переместить этот прямоугольник в (2, 3)","depends":[],"code":"\nconst { Container, Rectangle } = result;\nconst c = new Container(2, 3);\n\nconst r = new Rectangle(0, 0, 1, 1);\nc.add(r);\n\nconst { x: rx, y: ry } = r.position;\n\nassertEqual(2, rx);\nassertEqual(3, ry);\n","resultVars":["Container","Rectangle"],"id":"03.js"},{"title":"`Container.move(x, y)` должен быть функцией","depends":[],"code":"\nconst { Container } = result;\nconst c = new Container();\n\nassertIsFunction(c.move);\n","resultVars":["Container"],"id":"04.js"},{"title":"`Container.move()` должен перемещать фигуры внутри. Если после добавления в контейнер фигура находилась в точке (0, 0) и контейнер переместился из (2, 2) в (3, 3), фигура должна переместиться в (1, 1)","depends":[],"code":"\nconst { Container, Rectangle } = result;\nconst c = new Container(2, 2);\n\nconst r = new Rectangle(0, 0, 1, 1);\n\nc.add(r);\nr.move(0, 0);\nc.move(3, 3);\n\nassertEqual(1, r.position.x);\nassertEqual(1, r.position.y);\n","resultVars":["Container","Rectangle"],"id":"05.js"},{"title":"`Container.moveBy(x, y)` должен быть функцией","depends":[],"code":"\nconst { Container } = result;\nconst c = new Container();\n\nassertIsFunction(c.moveBy);\n","resultVars":["Container"],"id":"06.js"},{"title":"Если добавленный в контейнер прямоугольник находился в точке (1, 1), после вызова метода контейнера moveBy(3, 4), прямоугольник должен переместиться в точку (4, 5)","depends":[],"code":"\nconst { Container, Rectangle } = result;\nconst c = new Container(2, 2);\n\nconst r = new Rectangle(0, 0, 1, 1);\n\nc.add(r);\nr.move(1, 1);\n\nc.moveBy(3, 4);\n\nassertEqual(4, r.position.x);\nassertEqual(5, r.position.y);\n","resultVars":["Container","Rectangle"],"id":"07.js"}],"resultVars":["Container","Rectangle"],"courseRoute":"/course/6bff496c-8fe9-4cca-9bfb-ee5801314fbf"}