{"title":"Создаем функции","template":"//\n","markdown":"# Создаем функции\n\n * Создаем функцию `fn`, как обычную, нестрелочную функцию.\n * Создаем функцию `afn`, как стрелочную функцию.\n * Создаем функцию `fn1` с одним параметром и возвращаем его.\n * Создаем функцию `add` с двумя параметрами и возвращаем результат сложения.\n * Создаем функцию `count` которая будет возвращать количество переданных параметров.\n\n### Для справки\n\nКак получить доступ к массиву параметров можно посмотреть в справке к следующему заданию.\n","cases":[{"title":"создать `fn` как обычную, нестрелочную функцию","depends":[],"code":"const { fn } = result;\n\nassertIsFunction(fn);\nassert(fn.prototype);\n","resultVars":["fn"],"id":"01.js"},{"title":"создать `afn` как стрелочную функцию","depends":[],"code":"const { afn } = result;\n\nassertIsArrowFunction(afn);\n","resultVars":["afn"],"id":"02.js"},{"title":"`fn1` должна быть функцией и принимать один параметр","depends":[],"code":"const { fn1 } = result;\n\nassertIsFunction(fn1);\nassertEqual(fn1.length, 1);\n","resultVars":["fn1"],"id":"03.js"},{"title":"`fn1` должна быть функцией и возвращать значение параметра, который ей передали","depends":[],"code":"\nconst { fn1 } = result;\n\nassertEqual(fn1(5), 5);\n\nconst array = [];\nassertEqual(fn1(array), array);\n\nassertEqual(fn1(\"line\"), \"line\");\n","resultVars":["fn1"],"id":"04.js"},{"title":"`add` должна быть функцией и должна складывать числа","depends":[],"code":"\nconst { add } = result;\n\nassertIsFunction(add);\nassertEqual(add(3, 7), 10);\n","resultVars":["add"],"id":"05.js"},{"title":"`add` должна быть функцией и должна сцеплять строки","depends":[],"code":"\nconst { add } = result;\n\nassertIsFunction(add);\nassertEqual(add(\"превед \", \"медвед\"), \"превед медвед\");\n","resultVars":["add"],"id":"06.js"},{"title":"`count` должна быть функцией","depends":[],"code":"\nconst { count } = result;\n\nassertIsFunction(count);\n","resultVars":["count"],"id":"07.js"},{"title":"`count` должна возвращать `0` если параметров  нет","depends":[],"code":"\nconst { count } = result;\n\nassertEqual(count(), 0);\n","resultVars":["count"],"id":"08.js"},{"title":"`count` должна возвращать `3` если передано три параметра","depends":[],"code":"\nconst { count } = result;\n\nassertEqual(count(1, 2, 3), 3);\n","resultVars":["count"],"id":"09.js"}],"resultVars":["fn","afn","fn1","add","count"],"nextRoute":"/tasks/21b1fe2e-682b-4d95-aef3-12a61fb8d447","courseRoute":"/course/bfe513a9-c5b5-458e-adfb-2c71e023776b"}