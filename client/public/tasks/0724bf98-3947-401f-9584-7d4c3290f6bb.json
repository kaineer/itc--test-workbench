{"title":"Добавляем методы к точке","template":"class Point {\n  constructor(x, y) {\n    this.move(x, y);\n  }\n\n  move(x, y) {\n    this.x = x;\n    this.y = y;\n  }\n\n  equals(point) {\n    return (\n      point.x === this.x &&\n      point.y === this.y\n    );\n  }\n\n  // Добавлять можно сюда\n}\n// Сюда добавлять не надо\n","markdown":"# Добавляем методы к точке\n\n### moveBy()\n\nДобавим в точку метод `moveBy(x, y)`, который сдвинет точку на `x` по оси икс и на `y` по оси игрек.\n\nНапример, если у нас была точка `p` с координатами `x = 10` и `y = 20`, вызов `p.moveBy(5, 7)` изменит `x` на `15`, а `y` на `27`.\n\n### mirror()\n\nДобавим в точку метод `mirror(x, y)`, который \"отразит\" нашу точку относительно координат x и y.\n\nНапример, если у нас была точка (10, -5), то после отражения относительно точки (0, 0), ее координаты станут равны (-10, 5)\n","cases":[{"title":"`Point.moveBy(x, y)` должна быть функцией","depends":[],"code":"\nconst { Point } = result;\nconst p = new Point(0, 0);\n\nassertIsFunction(p.moveBy);\n","resultVars":["Point"],"id":"01.js"},{"title":"`Point.moveBy(x, y)` должна менять первую координату на `x`","depends":[],"code":"const { Point } = result;\nconst p = new Point(10, 0);\np.moveBy(10, 0);\n\nassertEqual(20, p.x);\n","resultVars":["Point"],"id":"02.js"},{"title":"`Point.moveBy(x, y)` должна менять вторую координату на `y`","depends":[],"code":"const { Point } = result;\nconst p = new Point(10, 0);\np.moveBy(10, 0);\n\nassertEqual(20, p.x);\n","resultVars":["Point"],"id":"03.js"},{"title":"`Point.mirror(x, y)` должна быть функцией","depends":[],"code":"\nconst { Point } = result;\nconst p = new Point(0, 0);\n\nassertIsFunction(p.mirror);\n","resultVars":["Point"],"id":"04.js"},{"title":"`Point.mirror(x, y)` должна отразить `(10, -5)` относительно `(0, 0)` в `(-10, 5)`","depends":[],"code":"const { Point } = result;\nconst p = new Point(10, -5);\n\np.mirror(0, 0);\n\nassertEqual(-10, p.x);\nassertEqual(5, p.y);\n","resultVars":["Point"],"id":"05.js"},{"title":"`Point.mirror(5, -5)` для (0, 0) должна переместить точку в (10, -10)","depends":[],"code":"const { Point } = result;\nconst p = new Point(0, 0);\n\np.mirror(5, -5);\n\nassertEqual(10, p.x);\nassertEqual(-10, p.y);\n","resultVars":["Point"],"id":"06.js"},{"title":"`Point.mirror(4, 1)` для (2, 2) должна переместить точку в (6, 0)","depends":[],"code":"const { Point } = result;\nconst p = new Point(2, 2);\n\np.mirror(4, 1);\n\nassertEqual(6, p.x);\nassertEqual(0, p.y);\n","resultVars":["Point"],"id":"07.js"}],"resultVars":["Point"],"nextRoute":"/tasks/b0857daa-ceb5-4497-ae36-4a4fc5134a5b","courseRoute":"/course/6bff496c-8fe9-4cca-9bfb-ee5801314fbf"}