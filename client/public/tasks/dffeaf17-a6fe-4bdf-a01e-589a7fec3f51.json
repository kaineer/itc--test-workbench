{"title":"[*] Проверим, является ли функция стрелочной","template":"//\n","markdown":"# [*] Проверим, является ли функция стрелочной\n\nНапишите функцию `isArrowFunction`, которая определит, является ли ее аргумент стрелочной функцией\n","cases":[{"title":"`isArrowFunction` должна быть функцией","depends":[],"code":"\nconst { isArrowFunction } = result;\n\nassertIsFunction(isArrowFunction);\n","resultVars":["isArrowFunction"],"id":"01.js"},{"title":"`isArrowFunction` должна возвращать `true` для стрелочных функций","depends":[],"code":"\nconst { isArrowFunction } = result;\n\nassert(isArrowFunction(() => null));\n","resultVars":["isArrowFunction"],"id":"02.js"},{"title":"`isArrowFunction` должна возвращать `false` для не-функций","depends":[],"code":"\nconst { isArrowFunction } = result;\n\nassert(!isArrowFunction());\nassert(!isArrowFunction(1));\nassert(!isArrowFunction(\"\"));\nassert(!isArrowFunction(true));\nassert(!isArrowFunction({}));\n","resultVars":["isArrowFunction"],"id":"03.js"},{"title":"`isArrowFunction` должна возвращать `false` для нестрелочных функций","depends":[],"code":"\nconst { isArrowFunction } = result;\n\nassert(!isArrowFunction(function () {}));\n","resultVars":["isArrowFunction"],"id":"04.js"},{"title":"`isArrowFunction` должна возвращать `true` для самой себя","depends":[],"code":"\nconst { isArrowFunction } = result;\n\nassert(isArrowFunction(isArrowFunction));\n","resultVars":["isArrowFunction"],"id":"05.js"}],"resultVars":["isArrowFunction"],"courseRoute":"/course/bfe513a9-c5b5-458e-adfb-2c71e023776b"}