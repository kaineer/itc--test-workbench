{"title":"Простые вычисления","template":"//\n","markdown":"# Простые вычисления\n\nСоздадим функцию `sum`, такую, что:\n\n * вернет сумму для двух аргументов\n * вернет сумму для произвольного числа аргументов\n * если ничего не передано, вернет 0\n\n### Для справки\n\nПолучить доступ к массиву аргументов функции можно двумя способами. Первый способ:\n\n```js\n// Функция fn1 выведет все аргументы функции\nfunction fn1() {\n  for (const arg of arguments) {\n    console.log(arg);\n  }\n}\n```\n\nВторой способ появился с новым синтаксисом:\n\n```js\n// Функция fn2 выведет все аргументы функции\nfunction fn2(...args) {\n  for (const arg of args) {\n    console.log(arg);\n  }\n}\n```\n","cases":[{"title":"`sum` должна быть функцией","depends":[],"code":"\nconst { sum } = result;\n\nassertIsFunction(sum);\n","resultVars":["sum"],"id":"01.js"},{"title":"`sum` должна возвращать сумму для двух аргументов","depends":[],"code":"\nconst { sum } = result;\n\nassertEqual(sum(1, 2), 3);\nassertEqual(sum(10, 1), 11);\n","resultVars":["sum"],"id":"02.js"},{"title":"`sum` должна возвращать сумму для произвольного числа аргументов","depends":[],"code":"\nconst { sum } = result;\n\nassertEqual(sum(1), 1);\nassertEqual(sum(1, 2, 3), 6);\nassertEqual(sum(1, 2, 3, 4), 10);\n","resultVars":["sum"],"id":"03.js"},{"title":"`sum` должна возвращать `0` если ничего не передано","depends":[],"code":"\nconst { sum } = result;\n\nassertEqual(sum(), 0);\n","resultVars":["sum"],"id":"04.js"}],"resultVars":["sum"],"nextRoute":"/tasks/921525ab-b56a-4947-a395-8e38f48a73ca","courseRoute":"/course/bfe513a9-c5b5-458e-adfb-2c71e023776b"}