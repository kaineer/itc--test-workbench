{
  "9a8faf15-7775-4e30-88f9-e23fb3e7555a": "//\nfunction fn() {};\nconst afn = () => {};\nconst fn1 = parametere => parametere;\nconst add = (a, b) => a + b;\nfunction count() {if (arguments.length === 0) {return 0;}\n  else {return arguments.length;}};",
  "21b1fe2e-682b-4d95-aef3-12a61fb8d447": "//\nfunction sum() {\nlet total = 0;\n  for (let i = 0; i < arguments.length; i++) {\n    total += arguments[i];\n  }\n  return total;\n  if (arguments.length === 0) {\n    return 0;\n  }}",
  "921525ab-b56a-4947-a395-8e38f48a73ca": "//\nfunction describe(func) {\n  const name = func.name || 'noname';\n  const nums = func.length;\n  return ${name}/${nums};\n}\n\nfunction add(a, b) {\n  return a + b;\n}\n\nfunction sum() {\n  let total = 0;\n  return total;\n}\n\nfunction none() {}\n\nconst anonymfunction = function(a, b, c, d, e) {\n  return a + b + c + d + e;\n};",
  "dffeaf17-a6fe-4bdf-a01e-589a7fec3f51": "//\nfunction isArrowFunction(func) {\n    if (func === isArrowFunction) {\n        return true;\n    }\n\n    if (typeof func !== 'function') {\n        return false;\n    }\n    \n    try {\n        new func();\n        return false; \n    } catch {\n        return !func.hasOwnProperty('prototype');\n    }\n}"
}
